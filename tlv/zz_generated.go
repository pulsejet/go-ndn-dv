// Generated by the generator, DO NOT modify manually
package tlv

import (
	"encoding/binary"
	"io"

	enc "github.com/zjkmxy/go-ndn/pkg/encoding"
)

type PacketEncoder struct {
	length uint

	Advertisement_encoder AdvertisementEncoder
	PrefixOpList_encoder  PrefixOpListEncoder
}

type PacketParsingContext struct {
	Advertisement_context AdvertisementParsingContext
	PrefixOpList_context  PrefixOpListParsingContext
}

func (encoder *PacketEncoder) Init(value *Packet) {
	if value.Advertisement != nil {
		encoder.Advertisement_encoder.Init(value.Advertisement)
	}
	if value.PrefixOpList != nil {
		encoder.PrefixOpList_encoder.Init(value.PrefixOpList)
	}
	l := uint(0)
	if value.Advertisement != nil {
		l += 1
		switch x := encoder.Advertisement_encoder.length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Advertisement_encoder.length
	}

	if value.PrefixOpList != nil {
		l += 1
		switch x := encoder.PrefixOpList_encoder.length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.PrefixOpList_encoder.length
	}

	encoder.length = l

}

func (context *PacketParsingContext) Init() {
	context.Advertisement_context.Init()
	context.PrefixOpList_context.Init()
}

func (encoder *PacketEncoder) EncodeInto(value *Packet, buf []byte) {

	pos := uint(0)
	if value.Advertisement != nil {
		buf[pos] = byte(201)
		pos += 1
		switch x := encoder.Advertisement_encoder.length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		if encoder.Advertisement_encoder.length > 0 {
			encoder.Advertisement_encoder.EncodeInto(value.Advertisement, buf[pos:])
			pos += encoder.Advertisement_encoder.length
		}
	}

	if value.PrefixOpList != nil {
		buf[pos] = byte(221)
		pos += 1
		switch x := encoder.PrefixOpList_encoder.length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		if encoder.PrefixOpList_encoder.length > 0 {
			encoder.PrefixOpList_encoder.EncodeInto(value.PrefixOpList, buf[pos:])
			pos += encoder.PrefixOpList_encoder.length
		}
	}

}

func (encoder *PacketEncoder) Encode(value *Packet) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *PacketParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*Packet, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &Packet{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 201:
				if progress+1 == 0 {
					handled = true
					value.Advertisement, err = context.Advertisement_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 221:
				if progress+1 == 1 {
					handled = true
					value.PrefixOpList, err = context.PrefixOpList_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.Advertisement = nil
				case 1 - 1:
					value.PrefixOpList = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:
			value.Advertisement = nil
		case 1 - 1:
			value.PrefixOpList = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *Packet) Encode() enc.Wire {
	encoder := PacketEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Packet) Bytes() []byte {
	return value.Encode().Join()
}

func ParsePacket(reader enc.ParseReader, ignoreCritical bool) (*Packet, error) {
	context := PacketParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type AdvertisementEncoder struct {
	length uint

	Links_subencoder []struct {
		Links_encoder LinkEncoder
	}

	AdvEntries_subencoder []struct {
		AdvEntries_encoder AdvEntryEncoder
	}
}

type AdvertisementParsingContext struct {
	Links_context      LinkParsingContext
	AdvEntries_context AdvEntryParsingContext
}

func (encoder *AdvertisementEncoder) Init(value *Advertisement) {
	{
		Links_l := len(value.Links)
		encoder.Links_subencoder = make([]struct {
			Links_encoder LinkEncoder
		}, Links_l)
		for i := 0; i < Links_l; i++ {
			pseudoEncoder := &encoder.Links_subencoder[i]
			pseudoValue := struct {
				Links *Link
			}{
				Links: value.Links[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Links != nil {
					encoder.Links_encoder.Init(value.Links)
				}
				_ = encoder
				_ = value
			}
		}
	}

	{
		AdvEntries_l := len(value.AdvEntries)
		encoder.AdvEntries_subencoder = make([]struct {
			AdvEntries_encoder AdvEntryEncoder
		}, AdvEntries_l)
		for i := 0; i < AdvEntries_l; i++ {
			pseudoEncoder := &encoder.AdvEntries_subencoder[i]
			pseudoValue := struct {
				AdvEntries *AdvEntry
			}{
				AdvEntries: value.AdvEntries[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.AdvEntries != nil {
					encoder.AdvEntries_encoder.Init(value.AdvEntries)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Links != nil {
		for seq_i, seq_v := range value.Links {
			pseudoEncoder := &encoder.Links_subencoder[seq_i]
			pseudoValue := struct {
				Links *Link
			}{
				Links: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Links != nil {
					l += 1
					switch x := encoder.Links_encoder.length; {
					case x <= 0xfc:
						l += 1
					case x <= 0xffff:
						l += 3
					case x <= 0xffffffff:
						l += 5
					default:
						l += 9
					}
					l += encoder.Links_encoder.length
				}

				_ = encoder
				_ = value
			}
		}
	}

	if value.AdvEntries != nil {
		for seq_i, seq_v := range value.AdvEntries {
			pseudoEncoder := &encoder.AdvEntries_subencoder[seq_i]
			pseudoValue := struct {
				AdvEntries *AdvEntry
			}{
				AdvEntries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.AdvEntries != nil {
					l += 1
					switch x := encoder.AdvEntries_encoder.length; {
					case x <= 0xfc:
						l += 1
					case x <= 0xffff:
						l += 3
					case x <= 0xffffffff:
						l += 5
					default:
						l += 9
					}
					l += encoder.AdvEntries_encoder.length
				}

				_ = encoder
				_ = value
			}
		}
	}

	encoder.length = l

}

func (context *AdvertisementParsingContext) Init() {
	context.Links_context.Init()
	context.AdvEntries_context.Init()
}

func (encoder *AdvertisementEncoder) EncodeInto(value *Advertisement, buf []byte) {

	pos := uint(0)
	if value.Links != nil {
		for seq_i, seq_v := range value.Links {
			pseudoEncoder := &encoder.Links_subencoder[seq_i]
			pseudoValue := struct {
				Links *Link
			}{
				Links: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Links != nil {
					buf[pos] = byte(202)
					pos += 1
					switch x := encoder.Links_encoder.length; {
					case x <= 0xfc:
						buf[pos] = byte(x)
						pos += 1
					case x <= 0xffff:
						buf[pos] = 0xfd
						binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
						pos += 3
					case x <= 0xffffffff:
						buf[pos] = 0xfe
						binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
						pos += 5
					default:
						buf[pos] = 0xff
						binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
						pos += 9
					}
					if encoder.Links_encoder.length > 0 {
						encoder.Links_encoder.EncodeInto(value.Links, buf[pos:])
						pos += encoder.Links_encoder.length
					}
				}

				_ = encoder
				_ = value
			}
		}
	}

	if value.AdvEntries != nil {
		for seq_i, seq_v := range value.AdvEntries {
			pseudoEncoder := &encoder.AdvEntries_subencoder[seq_i]
			pseudoValue := struct {
				AdvEntries *AdvEntry
			}{
				AdvEntries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.AdvEntries != nil {
					buf[pos] = byte(205)
					pos += 1
					switch x := encoder.AdvEntries_encoder.length; {
					case x <= 0xfc:
						buf[pos] = byte(x)
						pos += 1
					case x <= 0xffff:
						buf[pos] = 0xfd
						binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
						pos += 3
					case x <= 0xffffffff:
						buf[pos] = 0xfe
						binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
						pos += 5
					default:
						buf[pos] = 0xff
						binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
						pos += 9
					}
					if encoder.AdvEntries_encoder.length > 0 {
						encoder.AdvEntries_encoder.EncodeInto(value.AdvEntries, buf[pos:])
						pos += encoder.AdvEntries_encoder.length
					}
				}

				_ = encoder
				_ = value
			}
		}
	}

}

func (encoder *AdvertisementEncoder) Encode(value *Advertisement) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *AdvertisementParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*Advertisement, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &Advertisement{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 202:
				if progress+1 == 0 {
					handled = true
					if value.Links == nil {
						value.Links = make([]*Link, 0)
					}
					{
						pseudoValue := struct {
							Links *Link
						}{}
						{
							value := &pseudoValue
							value.Links, err = context.Links_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.Links = append(value.Links, pseudoValue.Links)
					}
					progress--

				}
			case 205:
				if progress+1 == 1 {
					handled = true
					if value.AdvEntries == nil {
						value.AdvEntries = make([]*AdvEntry, 0)
					}
					{
						pseudoValue := struct {
							AdvEntries *AdvEntry
						}{}
						{
							value := &pseudoValue
							value.AdvEntries, err = context.AdvEntries_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.AdvEntries = append(value.AdvEntries, pseudoValue.AdvEntries)
					}
					progress--

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:

				case 1 - 1:

				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:

		case 1 - 1:

		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *Advertisement) Encode() enc.Wire {
	encoder := AdvertisementEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Advertisement) Bytes() []byte {
	return value.Encode().Join()
}

func ParseAdvertisement(reader enc.ParseReader, ignoreCritical bool) (*Advertisement, error) {
	context := AdvertisementParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type LinkEncoder struct {
	length uint

	Neighbor_encoder NeighborEncoder
}

type LinkParsingContext struct {
	Neighbor_context NeighborParsingContext
}

func (encoder *LinkEncoder) Init(value *Link) {

	if value.Neighbor != nil {
		encoder.Neighbor_encoder.Init(value.Neighbor)
	}
	l := uint(0)
	l += 1
	switch x := value.Interface; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	if value.Neighbor != nil {
		l += 1
		switch x := encoder.Neighbor_encoder.length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Neighbor_encoder.length
	}

	encoder.length = l

}

func (context *LinkParsingContext) Init() {

	context.Neighbor_context.Init()
}

func (encoder *LinkEncoder) EncodeInto(value *Link, buf []byte) {

	pos := uint(0)
	buf[pos] = byte(203)
	pos += 1
	switch x := value.Interface; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

	if value.Neighbor != nil {
		buf[pos] = byte(204)
		pos += 1
		switch x := encoder.Neighbor_encoder.length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		if encoder.Neighbor_encoder.length > 0 {
			encoder.Neighbor_encoder.EncodeInto(value.Neighbor, buf[pos:])
			pos += encoder.Neighbor_encoder.length
		}
	}

}

func (encoder *LinkEncoder) Encode(value *Link) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *LinkParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*Link, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &Link{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 203:
				if progress+1 == 0 {
					handled = true
					value.Interface = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Interface = uint64(value.Interface<<8) | uint64(x)
						}
					}
				}
			case 204:
				if progress+1 == 1 {
					handled = true
					value.Neighbor, err = context.Neighbor_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					err = enc.ErrSkipRequired{Name: "Interface", TypeNum: 203}
				case 1 - 1:
					value.Neighbor = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:
			err = enc.ErrSkipRequired{Name: "Interface", TypeNum: 203}
		case 1 - 1:
			value.Neighbor = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *Link) Encode() enc.Wire {
	encoder := LinkEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Link) Bytes() []byte {
	return value.Encode().Join()
}

func ParseLink(reader enc.ParseReader, ignoreCritical bool) (*Link, error) {
	context := LinkParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type NeighborEncoder struct {
	length uint

	Name_length uint
}

type NeighborParsingContext struct {
}

func (encoder *NeighborEncoder) Init(value *Neighbor) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Name_length
	}

	encoder.length = l

}

func (context *NeighborParsingContext) Init() {

}

func (encoder *NeighborEncoder) EncodeInto(value *Neighbor, buf []byte) {

	pos := uint(0)
	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

}

func (encoder *NeighborEncoder) Encode(value *Neighbor) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *NeighborParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*Neighbor, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &Neighbor{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 7:
				if progress+1 == 0 {
					handled = true
					value.Name = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.Name {
						if reader.Pos() >= endName {
							value.Name = value.Name[:j]
							break
						}
						var err1, err3 error
						value.Name[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.Name[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.Name = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 1; progress++ {
		switch progress {
		case 0 - 1:
			value.Name = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *Neighbor) Encode() enc.Wire {
	encoder := NeighborEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Neighbor) Bytes() []byte {
	return value.Encode().Join()
}

func ParseNeighbor(reader enc.ParseReader, ignoreCritical bool) (*Neighbor, error) {
	context := NeighborParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type AdvEntryEncoder struct {
	length uint

	Destination_encoder DestinationEncoder
}

type AdvEntryParsingContext struct {
	Destination_context DestinationParsingContext
}

func (encoder *AdvEntryEncoder) Init(value *AdvEntry) {
	if value.Destination != nil {
		encoder.Destination_encoder.Init(value.Destination)
	}

	l := uint(0)
	if value.Destination != nil {
		l += 1
		switch x := encoder.Destination_encoder.length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Destination_encoder.length
	}

	l += 1
	switch x := value.Interface; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	l += 1
	switch x := value.Cost; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	l += 1
	switch x := value.OtherCost; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	encoder.length = l

}

func (context *AdvEntryParsingContext) Init() {
	context.Destination_context.Init()

}

func (encoder *AdvEntryEncoder) EncodeInto(value *AdvEntry, buf []byte) {

	pos := uint(0)
	if value.Destination != nil {
		buf[pos] = byte(206)
		pos += 1
		switch x := encoder.Destination_encoder.length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		if encoder.Destination_encoder.length > 0 {
			encoder.Destination_encoder.EncodeInto(value.Destination, buf[pos:])
			pos += encoder.Destination_encoder.length
		}
	}

	buf[pos] = byte(207)
	pos += 1
	switch x := value.Interface; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

	buf[pos] = byte(208)
	pos += 1
	switch x := value.Cost; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

	buf[pos] = byte(209)
	pos += 1
	switch x := value.OtherCost; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

}

func (encoder *AdvEntryEncoder) Encode(value *AdvEntry) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *AdvEntryParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*AdvEntry, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &AdvEntry{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 206:
				if progress+1 == 0 {
					handled = true
					value.Destination, err = context.Destination_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 207:
				if progress+1 == 1 {
					handled = true
					value.Interface = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Interface = uint64(value.Interface<<8) | uint64(x)
						}
					}
				}
			case 208:
				if progress+1 == 2 {
					handled = true
					value.Cost = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Cost = uint64(value.Cost<<8) | uint64(x)
						}
					}
				}
			case 209:
				if progress+1 == 3 {
					handled = true
					value.OtherCost = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.OtherCost = uint64(value.OtherCost<<8) | uint64(x)
						}
					}
				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.Destination = nil
				case 1 - 1:
					err = enc.ErrSkipRequired{Name: "Interface", TypeNum: 207}
				case 2 - 1:
					err = enc.ErrSkipRequired{Name: "Cost", TypeNum: 208}
				case 3 - 1:
					err = enc.ErrSkipRequired{Name: "OtherCost", TypeNum: 209}
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 4; progress++ {
		switch progress {
		case 0 - 1:
			value.Destination = nil
		case 1 - 1:
			err = enc.ErrSkipRequired{Name: "Interface", TypeNum: 207}
		case 2 - 1:
			err = enc.ErrSkipRequired{Name: "Cost", TypeNum: 208}
		case 3 - 1:
			err = enc.ErrSkipRequired{Name: "OtherCost", TypeNum: 209}
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *AdvEntry) Encode() enc.Wire {
	encoder := AdvEntryEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *AdvEntry) Bytes() []byte {
	return value.Encode().Join()
}

func ParseAdvEntry(reader enc.ParseReader, ignoreCritical bool) (*AdvEntry, error) {
	context := AdvEntryParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type DestinationEncoder struct {
	length uint

	Name_length uint
}

type DestinationParsingContext struct {
}

func (encoder *DestinationEncoder) Init(value *Destination) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Name_length
	}

	encoder.length = l

}

func (context *DestinationParsingContext) Init() {

}

func (encoder *DestinationEncoder) EncodeInto(value *Destination, buf []byte) {

	pos := uint(0)
	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

}

func (encoder *DestinationEncoder) Encode(value *Destination) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *DestinationParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*Destination, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &Destination{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 7:
				if progress+1 == 0 {
					handled = true
					value.Name = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.Name {
						if reader.Pos() >= endName {
							value.Name = value.Name[:j]
							break
						}
						var err1, err3 error
						value.Name[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.Name[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.Name = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 1; progress++ {
		switch progress {
		case 0 - 1:
			value.Name = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *Destination) Encode() enc.Wire {
	encoder := DestinationEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Destination) Bytes() []byte {
	return value.Encode().Join()
}

func ParseDestination(reader enc.ParseReader, ignoreCritical bool) (*Destination, error) {
	context := DestinationParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type PrefixOpListEncoder struct {
	length uint

	ExitRouter_encoder DestinationEncoder

	PrefixOpAdds_subencoder []struct {
		PrefixOpAdds_encoder PrefixOpAddEncoder
	}

	PrefixOpRemoves_subencoder []struct {
		PrefixOpRemoves_encoder PrefixOpRemoveEncoder
	}
}

type PrefixOpListParsingContext struct {
	ExitRouter_context DestinationParsingContext

	PrefixOpAdds_context    PrefixOpAddParsingContext
	PrefixOpRemoves_context PrefixOpRemoveParsingContext
}

func (encoder *PrefixOpListEncoder) Init(value *PrefixOpList) {
	if value.ExitRouter != nil {
		encoder.ExitRouter_encoder.Init(value.ExitRouter)
	}

	{
		PrefixOpAdds_l := len(value.PrefixOpAdds)
		encoder.PrefixOpAdds_subencoder = make([]struct {
			PrefixOpAdds_encoder PrefixOpAddEncoder
		}, PrefixOpAdds_l)
		for i := 0; i < PrefixOpAdds_l; i++ {
			pseudoEncoder := &encoder.PrefixOpAdds_subencoder[i]
			pseudoValue := struct {
				PrefixOpAdds *PrefixOpAdd
			}{
				PrefixOpAdds: value.PrefixOpAdds[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.PrefixOpAdds != nil {
					encoder.PrefixOpAdds_encoder.Init(value.PrefixOpAdds)
				}
				_ = encoder
				_ = value
			}
		}
	}

	{
		PrefixOpRemoves_l := len(value.PrefixOpRemoves)
		encoder.PrefixOpRemoves_subencoder = make([]struct {
			PrefixOpRemoves_encoder PrefixOpRemoveEncoder
		}, PrefixOpRemoves_l)
		for i := 0; i < PrefixOpRemoves_l; i++ {
			pseudoEncoder := &encoder.PrefixOpRemoves_subencoder[i]
			pseudoValue := struct {
				PrefixOpRemoves *PrefixOpRemove
			}{
				PrefixOpRemoves: value.PrefixOpRemoves[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.PrefixOpRemoves != nil {
					encoder.PrefixOpRemoves_encoder.Init(value.PrefixOpRemoves)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.ExitRouter != nil {
		l += 1
		switch x := encoder.ExitRouter_encoder.length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.ExitRouter_encoder.length
	}

	if value.PrefixOpReset {
		l += 1
		l += 1
	}

	if value.PrefixOpAdds != nil {
		for seq_i, seq_v := range value.PrefixOpAdds {
			pseudoEncoder := &encoder.PrefixOpAdds_subencoder[seq_i]
			pseudoValue := struct {
				PrefixOpAdds *PrefixOpAdd
			}{
				PrefixOpAdds: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.PrefixOpAdds != nil {
					l += 1
					switch x := encoder.PrefixOpAdds_encoder.length; {
					case x <= 0xfc:
						l += 1
					case x <= 0xffff:
						l += 3
					case x <= 0xffffffff:
						l += 5
					default:
						l += 9
					}
					l += encoder.PrefixOpAdds_encoder.length
				}

				_ = encoder
				_ = value
			}
		}
	}

	if value.PrefixOpRemoves != nil {
		for seq_i, seq_v := range value.PrefixOpRemoves {
			pseudoEncoder := &encoder.PrefixOpRemoves_subencoder[seq_i]
			pseudoValue := struct {
				PrefixOpRemoves *PrefixOpRemove
			}{
				PrefixOpRemoves: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.PrefixOpRemoves != nil {
					l += 1
					switch x := encoder.PrefixOpRemoves_encoder.length; {
					case x <= 0xfc:
						l += 1
					case x <= 0xffff:
						l += 3
					case x <= 0xffffffff:
						l += 5
					default:
						l += 9
					}
					l += encoder.PrefixOpRemoves_encoder.length
				}

				_ = encoder
				_ = value
			}
		}
	}

	encoder.length = l

}

func (context *PrefixOpListParsingContext) Init() {
	context.ExitRouter_context.Init()

	context.PrefixOpAdds_context.Init()
	context.PrefixOpRemoves_context.Init()
}

func (encoder *PrefixOpListEncoder) EncodeInto(value *PrefixOpList, buf []byte) {

	pos := uint(0)
	if value.ExitRouter != nil {
		buf[pos] = byte(206)
		pos += 1
		switch x := encoder.ExitRouter_encoder.length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		if encoder.ExitRouter_encoder.length > 0 {
			encoder.ExitRouter_encoder.EncodeInto(value.ExitRouter, buf[pos:])
			pos += encoder.ExitRouter_encoder.length
		}
	}

	if value.PrefixOpReset {
		buf[pos] = byte(222)
		pos += 1
		buf[pos] = byte(0)
		pos += 1
	}

	if value.PrefixOpAdds != nil {
		for seq_i, seq_v := range value.PrefixOpAdds {
			pseudoEncoder := &encoder.PrefixOpAdds_subencoder[seq_i]
			pseudoValue := struct {
				PrefixOpAdds *PrefixOpAdd
			}{
				PrefixOpAdds: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.PrefixOpAdds != nil {
					buf[pos] = byte(223)
					pos += 1
					switch x := encoder.PrefixOpAdds_encoder.length; {
					case x <= 0xfc:
						buf[pos] = byte(x)
						pos += 1
					case x <= 0xffff:
						buf[pos] = 0xfd
						binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
						pos += 3
					case x <= 0xffffffff:
						buf[pos] = 0xfe
						binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
						pos += 5
					default:
						buf[pos] = 0xff
						binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
						pos += 9
					}
					if encoder.PrefixOpAdds_encoder.length > 0 {
						encoder.PrefixOpAdds_encoder.EncodeInto(value.PrefixOpAdds, buf[pos:])
						pos += encoder.PrefixOpAdds_encoder.length
					}
				}

				_ = encoder
				_ = value
			}
		}
	}

	if value.PrefixOpRemoves != nil {
		for seq_i, seq_v := range value.PrefixOpRemoves {
			pseudoEncoder := &encoder.PrefixOpRemoves_subencoder[seq_i]
			pseudoValue := struct {
				PrefixOpRemoves *PrefixOpRemove
			}{
				PrefixOpRemoves: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.PrefixOpRemoves != nil {
					buf[pos] = byte(224)
					pos += 1
					switch x := encoder.PrefixOpRemoves_encoder.length; {
					case x <= 0xfc:
						buf[pos] = byte(x)
						pos += 1
					case x <= 0xffff:
						buf[pos] = 0xfd
						binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
						pos += 3
					case x <= 0xffffffff:
						buf[pos] = 0xfe
						binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
						pos += 5
					default:
						buf[pos] = 0xff
						binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
						pos += 9
					}
					if encoder.PrefixOpRemoves_encoder.length > 0 {
						encoder.PrefixOpRemoves_encoder.EncodeInto(value.PrefixOpRemoves, buf[pos:])
						pos += encoder.PrefixOpRemoves_encoder.length
					}
				}

				_ = encoder
				_ = value
			}
		}
	}

}

func (encoder *PrefixOpListEncoder) Encode(value *PrefixOpList) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *PrefixOpListParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*PrefixOpList, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &PrefixOpList{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 206:
				if progress+1 == 0 {
					handled = true
					value.ExitRouter, err = context.ExitRouter_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 222:
				if progress+1 == 1 {
					handled = true
					value.PrefixOpReset = true
				}
			case 223:
				if progress+1 == 2 {
					handled = true
					if value.PrefixOpAdds == nil {
						value.PrefixOpAdds = make([]*PrefixOpAdd, 0)
					}
					{
						pseudoValue := struct {
							PrefixOpAdds *PrefixOpAdd
						}{}
						{
							value := &pseudoValue
							value.PrefixOpAdds, err = context.PrefixOpAdds_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.PrefixOpAdds = append(value.PrefixOpAdds, pseudoValue.PrefixOpAdds)
					}
					progress--

				}
			case 224:
				if progress+1 == 3 {
					handled = true
					if value.PrefixOpRemoves == nil {
						value.PrefixOpRemoves = make([]*PrefixOpRemove, 0)
					}
					{
						pseudoValue := struct {
							PrefixOpRemoves *PrefixOpRemove
						}{}
						{
							value := &pseudoValue
							value.PrefixOpRemoves, err = context.PrefixOpRemoves_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.PrefixOpRemoves = append(value.PrefixOpRemoves, pseudoValue.PrefixOpRemoves)
					}
					progress--

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.ExitRouter = nil
				case 1 - 1:
					value.PrefixOpReset = false
				case 2 - 1:

				case 3 - 1:

				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 4; progress++ {
		switch progress {
		case 0 - 1:
			value.ExitRouter = nil
		case 1 - 1:
			value.PrefixOpReset = false
		case 2 - 1:

		case 3 - 1:

		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *PrefixOpList) Encode() enc.Wire {
	encoder := PrefixOpListEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *PrefixOpList) Bytes() []byte {
	return value.Encode().Join()
}

func ParsePrefixOpList(reader enc.ParseReader, ignoreCritical bool) (*PrefixOpList, error) {
	context := PrefixOpListParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type PrefixOpAddEncoder struct {
	length uint

	Name_length uint
}

type PrefixOpAddParsingContext struct {
}

func (encoder *PrefixOpAddEncoder) Init(value *PrefixOpAdd) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Name_length
	}

	l += 1
	switch x := value.Cost; {
	case x <= 0xff:
		l += 2
	case x <= 0xffff:
		l += 3
	case x <= 0xffffffff:
		l += 5
	default:
		l += 9
	}

	encoder.length = l

}

func (context *PrefixOpAddParsingContext) Init() {

}

func (encoder *PrefixOpAddEncoder) EncodeInto(value *PrefixOpAdd, buf []byte) {

	pos := uint(0)
	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

	buf[pos] = byte(208)
	pos += 1
	switch x := value.Cost; {
	case x <= 0xff:
		buf[pos] = 1
		buf[pos+1] = byte(x)
		pos += 2
	case x <= 0xffff:
		buf[pos] = 2
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
		pos += 3
	case x <= 0xffffffff:
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
		pos += 5
	default:
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
		pos += 9
	}

}

func (encoder *PrefixOpAddEncoder) Encode(value *PrefixOpAdd) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *PrefixOpAddParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*PrefixOpAdd, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &PrefixOpAdd{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 7:
				if progress+1 == 0 {
					handled = true
					value.Name = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.Name {
						if reader.Pos() >= endName {
							value.Name = value.Name[:j]
							break
						}
						var err1, err3 error
						value.Name[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.Name[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			case 208:
				if progress+1 == 1 {
					handled = true
					value.Cost = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Cost = uint64(value.Cost<<8) | uint64(x)
						}
					}
				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.Name = nil
				case 1 - 1:
					err = enc.ErrSkipRequired{Name: "Cost", TypeNum: 208}
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 2; progress++ {
		switch progress {
		case 0 - 1:
			value.Name = nil
		case 1 - 1:
			err = enc.ErrSkipRequired{Name: "Cost", TypeNum: 208}
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *PrefixOpAdd) Encode() enc.Wire {
	encoder := PrefixOpAddEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *PrefixOpAdd) Bytes() []byte {
	return value.Encode().Join()
}

func ParsePrefixOpAdd(reader enc.ParseReader, ignoreCritical bool) (*PrefixOpAdd, error) {
	context := PrefixOpAddParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type PrefixOpRemoveEncoder struct {
	length uint

	Name_length uint
}

type PrefixOpRemoveParsingContext struct {
}

func (encoder *PrefixOpRemoveEncoder) Init(value *PrefixOpRemove) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			l += 1
		case x <= 0xffff:
			l += 3
		case x <= 0xffffffff:
			l += 5
		default:
			l += 9
		}
		l += encoder.Name_length
	}

	encoder.length = l

}

func (context *PrefixOpRemoveParsingContext) Init() {

}

func (encoder *PrefixOpRemoveEncoder) EncodeInto(value *PrefixOpRemove, buf []byte) {

	pos := uint(0)
	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		switch x := encoder.Name_length; {
		case x <= 0xfc:
			buf[pos] = byte(x)
			pos += 1
		case x <= 0xffff:
			buf[pos] = 0xfd
			binary.BigEndian.PutUint16(buf[pos+1:], uint16(x))
			pos += 3
		case x <= 0xffffffff:
			buf[pos] = 0xfe
			binary.BigEndian.PutUint32(buf[pos+1:], uint32(x))
			pos += 5
		default:
			buf[pos] = 0xff
			binary.BigEndian.PutUint64(buf[pos+1:], uint64(x))
			pos += 9
		}
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}

}

func (encoder *PrefixOpRemoveEncoder) Encode(value *PrefixOpRemove) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *PrefixOpRemoveParsingContext) Parse(reader enc.ParseReader, ignoreCritical bool) (*PrefixOpRemove, error) {
	if reader == nil {
		return nil, enc.ErrBufferOverflow
	}
	progress := -1
	value := &PrefixOpRemove{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = enc.ReadTLNum(reader)
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		err = nil
		for handled := false; !handled; progress++ {
			switch typ {
			case 7:
				if progress+1 == 0 {
					handled = true
					value.Name = make(enc.Name, l/2+1)
					startName := reader.Pos()
					endName := startName + int(l)
					for j := range value.Name {
						if reader.Pos() >= endName {
							value.Name = value.Name[:j]
							break
						}
						var err1, err3 error
						value.Name[j].Typ, err1 = enc.ReadTLNum(reader)
						l, err2 := enc.ReadTLNum(reader)
						value.Name[j].Val, err3 = reader.ReadBuf(int(l))
						if err1 != nil || err2 != nil || err3 != nil {
							err = io.ErrUnexpectedEOF
							break
						}
					}
					if err == nil && reader.Pos() != endName {
						err = enc.ErrBufferOverflow
					}

				}
			default:
				handled = true
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					value.Name = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}
	startPos = reader.Pos()
	for ; progress < 1; progress++ {
		switch progress {
		case 0 - 1:
			value.Name = nil
		}
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

func (value *PrefixOpRemove) Encode() enc.Wire {
	encoder := PrefixOpRemoveEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *PrefixOpRemove) Bytes() []byte {
	return value.Encode().Join()
}

func ParsePrefixOpRemove(reader enc.ParseReader, ignoreCritical bool) (*PrefixOpRemove, error) {
	context := PrefixOpRemoveParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}
